# pearson correlation is only appropriate for interval or ratio data
# we are only concerned about multicollinearity between predictor variables
myvars <- df %>%
dplyr::select(samhi_dec,pop_dens,unemployment_rate,single_hc,annual_income) %>%
st_drop_geometry()
# get correlation matrix
cormat <- cor(myvars, use="complete.obs", method="pearson")
# significance test
sig1 <- corrplot::cor.mtest(myvars, conf.level = .95)
# create a correlogram
corrplot::corrplot(cormat, type = "lower",
method = "circle",
order = "hclust",
tl.cex = 0.7,
p.mat = sig1$p, sig.level = .05,
col = viridis::viridis(100, option = "magma"),
diag = FALSE)
myvars2 <- myvars %>%
select(samhi_dec,unemployment_rate,pop_dens,single_hc)
cormat <- cor(myvars2, use="complete.obs", method="pearson")
# significance test
sig1 <- corrplot::cor.mtest(myvars2, conf.level = .95)
# create a correlogram
corrplot::corrplot(cormat, type="lower",
method = "circle",
order = "original",
tl.cex = 0.7,
p.mat = sig1$p, sig.level = .05,
col = viridis::viridis(100, option = "plasma"),
diag = FALSE)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
annual_income,
single_hc)
p1 <- ggplot(regression_data, aes(x=imd_score, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
single_hc)
p1 <- ggplot(regression_data, aes(x=imd_score, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
single_hc)
p1 <- ggplot(regression_data, aes(x=imd_score, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p3 <- ggplot(regression_data, aes(x=unemployment_rate, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2,p3)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
single_hc)
p1 <- ggplot(regression_data, aes(x=pop_dens, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p3 <- ggplot(regression_data, aes(x=unemployment_rate, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2,p3)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
pop_dens
single_hc)
View(df)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
pop_dens,
single_hc)
p1 <- ggplot(regression_data, aes(x=pop_dens, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p3 <- ggplot(regression_data, aes(x=unemployment_rate, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2,p3)
eq <- samhi_dec ~
imd_score + single_hc + pop_dens + unemployment_rate
ols_model <- lm(eq,
data = regression_data)
eq <- samhi_dec ~
single_hc + pop_dens + unemployment_rate
ols_model <- lm(eq,
data = regression_data)
# show the summary of those outputs
tidy(ols_model)
glance(ols_model)
summary(ols_model)
depriv <- read_excel(here::here("data","lsoa-data.xls"))%>%
clean_names()
head(depriv)
# filter 2011 and population density column
depriv_2011 <- depriv %>%
select(.,codes, unemployment_rate,median_annual_household_income_estimate)%>%
rename(annual_income=median_annual_household_income_estimate)
summary(depriv_2011)
hc <- read_csv(here::here("data","household.csv"),locale=locale(encoding = "latin1")) %>%
clean_names()
hc <- read_csv(here::here("data","household.csv"),locale=locale(encoding = "latin1")) %>%
clean_names()
hc_2011 <- hc%>%
mutate(single_hc=household_composition_one_person_household_measures_value/household_composition_all_categories_household_composition_measures_value)%>%
select(geography_code, single_hc)
sum(is.na(hc$household_composition_one_person_household_measures_value))
sum(is.na(hc$household_composition_all_categories_household_composition_measures_value))
# join population density, IMD, and ethnicity to LSOA boundary
predictors <- lsoa %>%
left_join(.,
samhi_2011,
by = c("LSOA11CD"="lsoa11"))%>%
left_join(.,
pd_2011,
by = c("LSOA11CD"="geography_code"))%>%
left_join(.,
depriv_2011,
by = c("LSOA11CD"="codes"))%>%
left_join(.,
hc_2011,
by = c("LSOA11CD"="geography_code"))
# join population density, IMD, and ethnicity to LSOA boundary
predictors <- samhi_2011 %>%
left_join(.,
pd_2011,
by = c("lsoa11"="geography_code"))%>%
left_join(.,
depriv_2011,
by = c("lsoa11"="codes"))%>%
left_join(.,
hc_2011,
by = c("lsoa11"="geography_code"))
write.csv(df, file='./data.csv')
# join population density, IMD, and ethnicity to LSOA boundary
join <- lsoa %>%
left_join(.,
samhi_2011,
by = c("LSOA11CD"="lsoa11"))%>%
left_join(.,
pd_2011,
by = c("LSOA11CD"="geography_code"))%>%
left_join(.,
depriv_2011,
by = c("LSOA11CD"="codes"))%>%
left_join(.,
hc_2011,
by = c("LSOA11CD"="geography_code"))
df <- join%>%
select(.,LSOA11CD, samhi_dec, area_population_density_density_number_of_persons_per_hectare_measures_value, unemployment_rate, annual_income, single_hc)%>%
rename(pop_dens=area_population_density_density_number_of_persons_per_hectare_measures_value)%>%
clean_names()
Datatypelist <- df %>%
st_drop_geometry() %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
h1 <- ggplot(df, aes(x=pop_dens)) +
geom_histogram(color = "darkblue",
fill = "lightblue") +
theme_bw()
h2 <- ggplot(df, aes(x=unemployment_rate)) +
geom_histogram(color = "darkblue",
fill = "lightblue") +
theme_bw()
h3 <- ggplot(df, aes(x=single_hc)) +
geom_histogram(color = "darkblue",
fill = "lightblue") +
theme_bw()
h4 <- ggplot(df, aes(x=annual_income)) +
geom_histogram(color = "darkblue",
fill = "lightblue") +
theme_bw()
plot_grid(h1,h2,h3,h4)
# check their correlations are OK
# pearson correlation is only appropriate for interval or ratio data
# we are only concerned about multicollinearity between predictor variables
myvars <- df %>%
dplyr::select(samhi_dec,pop_dens,unemployment_rate,single_hc,annual_income) %>%
st_drop_geometry()
# get correlation matrix
cormat <- cor(myvars, use="complete.obs", method="pearson")
# significance test
sig1 <- corrplot::cor.mtest(myvars, conf.level = .95)
# create a correlogram
corrplot::corrplot(cormat, type = "lower",
method = "circle",
order = "hclust",
tl.cex = 0.7,
p.mat = sig1$p, sig.level = .05,
col = viridis::viridis(100, option = "magma"),
diag = FALSE)
myvars2 <- myvars %>%
select(samhi_dec,unemployment_rate,pop_dens,single_hc)
cormat <- cor(myvars2, use="complete.obs", method="pearson")
# significance test
sig1 <- corrplot::cor.mtest(myvars2, conf.level = .95)
# create a correlogram
corrplot::corrplot(cormat, type="lower",
method = "circle",
order = "original",
tl.cex = 0.7,
p.mat = sig1$p, sig.level = .05,
col = viridis::viridis(100, option = "plasma"),
diag = FALSE)
regression_data <- df %>%
dplyr::select(lsoa11cd,
samhi_dec,
unemployment_rate,
pop_dens,
single_hc)
p1 <- ggplot(regression_data, aes(x=pop_dens, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p2 <- ggplot(regression_data, aes(x=single_hc, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
p3 <- ggplot(regression_data, aes(x=unemployment_rate, y=samhi_dec)) +
geom_point() +
geom_smooth(method=lm) +
theme_classic()
plot_grid(p1, p2,p3)
eq <- samhi_dec ~
single_hc + pop_dens + unemployment_rate
ols_model <- lm(eq,
data = regression_data)
# show the summary of those outputs
tidy(ols_model)
glance(ols_model)
summary(ols_model)
# plot population density
map_samhi <- tm_shape(predictors)+
tm_fill(col="samhi_dec",
title = "London Common Mental Health index 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_samhi
# plot population density
map_samhi <- tm_shape(df)+
tm_fill(col="samhi_dec",
title = "London Common Mental Health index 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_samhi
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Deprivation Index 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot deprivation index (IMD)
map_imd <- tm_shape(df)+
tm_fill(col="unemployment_rate",
title = "London Deprivation Index 2011",
breaks = c(0, 10 ,20, 30, 40, 50, 60,70),
style = "fixed",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_imd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Deprivation Index 2011",
style = "fixed",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Deprivation Index 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot deprivation index (IMD)
map_imd <- tm_shape(df)+
tm_fill(col="unemployment_rate",
title = "Unemployment rate 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_imd
# plot deprivation index (IMD)
map_imd <- tm_shape(df)+
tm_fill(col="single_hc",
title = "Single Household Percentage 2011",
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_imd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
breaks = c(100,200,300,400,500,600),
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
breaks = c(100,200,300,400,500,600,700,800,900,1000),
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
View(df)
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
breaks = c(0,100,200,300,400,500,600,700),
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
breaks = c(0,200,400,500,600,700),
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
# plot population density
map_pd <- tm_shape(df)+
tm_fill(col="pop_dens",
title = "London Population Density 2011",
breaks = c(0,200,400,450,500,550,600,650,700),
style = "cont",
textNA = "No data",
colorNA = "white",
palette = "RdBu")+
tm_borders(col = "gray", lwd = .1) +
tm_compass(type = "arrow", position = c("right", "top") , size = .5) +
tm_scale_bar(breaks = c(0,1,2), text.size = 0.7, position =  c("left", "bottom")) +
tm_layout(bg.color = "white", legend.outside = TRUE)
map_pd
lm.LMtests(ols_model, msoa_spatial_weights_list,
test = c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
shape_joined <- df %>%
mutate(ols_model_res = residuals(ols_model))
ggplot(shape_joined, aes(x=ols_model_res)) +
geom_histogram(color = "darkblue",
fill = "lightblue") +
theme_bw()
par(mfrow = c(2, 2))
plot(ols_model)
tm_shape(shape_joined) +
tm_polygons("ols_model_res")
# calculate the centroids of MSOAs
centroids <- shape_joined %>%
st_centroid() %>%
st_geometry()
# the poly2nb function builds a neighbours list based on regions with contiguous boundaries, that is sharing one or more boundary point
# queen = TRUE means a single shared boundary point meets the contiguity condition
neighbours_list <- shape_joined %>%
poly2nb(., queen=T)
summary(neighbours_list)
plot(neighbours_list, st_geometry(centroids), col="red")
plot(shape_joined$geometry, add = T)
# k nearest neighbours returns a matrix with the indices of points belonging to the set of the k nearest neighbours of each other
knn_msoa <- centroids %>%
knearneigh(., k=4)
# convert the knn object returned by knearneigh into a neighbours list
knn_nb <- knn_msoa %>%
knn2nb()
plot(knn_nb, st_geometry(centroids), col="blue")
plot(shape_joined$geometry, add = T)
# add spatial weights to neighbours list
lsoa_spatial_weights_list <- knn_nb %>%
nb2listw(., style="W")
# run Moran's I test for spatial autocorrelation
global_moran <- shape_joined %>%
pull(ols_model_res) %>%
as.vector() %>%
moran.test(., lsoa_spatial_weights_list)
global_moran
lm.LMtests(ols_model, msoa_spatial_weights_list,
test = c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
lm.LMtests(ols_model, lsoa_spatial_weights_list,
test = c("LMerr", "LMlag", "RLMerr", "RLMlag", "SARMA"))
# Spatial simultaneous autoregressive lag model estimation
splag_model <- lagsarlm(eq,
data = regression_data,
lsoa_spatial_weights_list)
